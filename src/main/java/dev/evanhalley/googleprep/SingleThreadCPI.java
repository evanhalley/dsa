package dev.evanhalley.googleprep;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

public class SingleThreadCPI {

    public static void main(String[] args) {
        System.out.println(Arrays.toString(new Solution().getOrder(new int[][]{{14005,52136},{70280,94064},{93255,17533},{69373,89474},{72293,64210},{54403,90066},{8522,28033},{89348,68208},{28628,54585},{57427,58955},{15280,13424},{32304,12108},{11684,51590},{54798,3491},{37347,31206},{23815,73156},{73514,470},{60360,30922},{66103,76670},{19559,80128},{77358,65239},{89485,74289},{70104,15247},{36079,52833},{40040,50307},{13381,96928},{99166,26300},{16143,32173},{6110,44955},{90137,28861},{12432,909},{32314,79826},{80262,38031},{23283,89526},{57143,32641},{90343,1268},{67106,22765},{14923,28632},{34008,4100},{37100,73808},{78582,6193},{85103,99425},{82184,87835},{74636,31434},{69686,65531},{69280,95189},{65935,43157},{39713,28704},{78676,58596},{2107,90829},{12804,21837},{70268,19279},{25684,26396},{53289,12512},{123,51779},{41322,83942},{81972,72336},{68372,64425},{59583,33636},{24740,44421},{94648,88482},{88033,8155},{32468,45235},{47919,84781},{7951,55040},{8924,28611},{72042,76538},{91397,2530},{38082,7847},{34609,41391},{15903,56081},{66748,10469},{11075,99770},{20908,50686},{58182,91302},{52270,33637},{91401,72692},{28985,23255},{78429,1368},{83535,63054},{83898,90937},{84568,58554},{27647,7573},{74590,57201},{52258,52904},{2847,84098},{79892,29612},{46302,8565},{97718,47101},{48313,67491},{24029,26771},{21308,21870},{72241,91829},{70855,60681},{36153,64112},{98349,5497},{59034,48438},{11258,29434},{87677,32766},{94993,12021},{42963,33071},{11574,72852},{8110,25107},{1548,97347},{16634,42071},{91011,70984},{5285,84466},{91033,78029},{34457,94099},{40486,57273},{2434,43854},{98059,32709},{21081,76992},{3527,77785},{38585,10941},{61264,81579},{47862,73596},{33137,56109},{6705,71220},{83664,45637},{38499,5298},{48078,88024},{2906,22526},{66021,42406},{4538,338},{90436,84885},{40861,9574},{26655,65568},{22288,2634},{15244,32982},{71490,49506},{54966,68174},{63959,55963},{12472,30893},{14548,54388},{44007,99816},{55077,51911},{67953,99283},{10536,29733},{9474,85158},{23162,22712},{50291,27618},{8829,7548},{76708,57424},{36733,86940},{93337,89874},{17175,65441},{81755,18209},{95842,14641},{19974,62316},{73747,42495},{74090,64438},{14152,1374},{78162,92779},{65619,11255},{67751,74231},{54458,25601},{99920,61930},{43730,26776},{57418,70940},{90013,15144},{83234,2980},{78066,94608},{97186,62651},{60476,11698},{86166,54841},{66719,25161},{90270,33788},{8433,95167},{11615,2899},{36473,27938},{46605,15746},{65455,15484},{35005,10866},{62101,12359},{67097,26009},{7648,89449},{4193,40138},{59639,49853},{26464,55497},{43629,87508},{59081,26253},{93157,40631},{47053,6280},{6173,88782},{16758,57035},{94613,77855},{27960,26248},{57405,81538},{12202,67570},{50671,93965},{18671,93489},{3334,97376},{55310,12044},{76693,88350},{24562,83244},{1750,89025},{27833,14859},{92365,40093},{55438,31635},{44616,99781},{51922,93421},{91209,38992},{153,4578},{11107,71589},{96122,23198},{9079,91723},{46326,83403},{39096,54716},{13306,33268},{99393,25176},{37600,84459},{74674,15368},{98123,42069},{44186,51233},{18754,89758},{513,65361},{49213,92959},{66089,25232},{25164,55377},{23846,66288},{84183,84888},{91174,45438},{68687,6112},{6108,46650},{4164,40657},{60366,33975},{77796,47022},{67559,72220},{93466,77804},{43079,17351},{60005,27199},{55433,19061},{19045,58713},{83733,99855},{95774,59739},{91286,57009},{98873,93264},{88457,72475},{49856,44389},{93124,64157},{32719,92641},{48084,77802},{67320,3984},{14308,2737},{55478,55755},{84080,69107},{73586,66375},{22138,63768},{34625,36644},{53533,71275},{28127,50332},{43882,10545},{60402,85332},{5804,58434},{88096,11400},{39385,27163},{33907,93903},{89663,26833},{96737,78084},{66404,18119},{19808,47971},{44628,6371},{2733,53928},{10524,63205},{79723,35471},{66003,82892},{15218,5225},{44227,1390},{19350,36844},{71980,13925},{61468,15267},{69770,86722},{58047,66342},{22163,7715},{92310,89876},{5396,77219},{74850,46912},{57170,91895},{42731,47388},{36561,33305},{71589,13294},{17505,54541},{36731,9486},{80665,10997},{13628,70538},{14662,87889},{99054,22271},{94364,81319},{67658,26637},{79789,36796},{11292,62734},{34861,3756},{47710,29534},{57663,65708},{43072,60471},{33176,92689},{26078,48807},{68748,58243},{73699,24127},{77799,37296},{86198,55205},{90182,20131},{92193,96936},{43521,9284},{92226,16852},{41263,43575},{43734,68155},{56261,10415},{78424,38012},{85382,29046},{5822,98652},{2099,73415},{11691,1381},{83356,18975},{11363,89870},{3958,43148},{57809,91592},{10468,46162},{36369,88987},{3930,61863},{11492,76394},{74173,33247},{28109,23721},{11517,43125},{13384,595},{11235,10},{17007,14505},{46364,86097},{68268,83963},{90117,45065},{16575,54459},{78416,78733},{61468,33882},{64922,78695},{35909,55606},{5760,64780},{49236,50542},{80352,29681},{81220,46580},{74484,54111},{59745,37721},{78064,65834},{449,88517},{93352,69466},{40524,40007},{74854,73997},{44624,33393},{1166,81887},{70615,63316},{88555,67155},{33990,59795},{60011,60125},{85651,84841},{62906,59222},{75509,38750},{53020,36787},{82590,67580},{19091,8772},{71907,2496},{26606,90693},{23442,4499},{65863,44235},{2488,18170},{83886,88091},{49546,70638},{35205,94921},{70775,52448},{21204,52213},{90746,7822},{20990,95762},{211,86170},{60583,79117},{57697,23919},{8490,86551},{37299,25578},{40564,25056},{10052,19692},{42668,23176},{29423,80991},{17160,23914},{11037,38910},{78531,20615},{71433,48811},{56805,25627},{36868,40836},{10766,55465},{51559,45502},{15042,69393},{96076,27586},{14997,97869},{60311,23375},{31778,40178},{10513,17271},{79930,40013},{3235,27461},{97462,9676},{54705,35722},{52555,58597},{58121,84992},{39400,88601},{4834,38773},{18215,20086},{76972,72254},{73936,8936},{7681,64245},{23119,89793},{41054,69517},{91205,74766},{41648,35462},{39025,42988},{50423,64250},{87668,5080},{3068,65801},{41565,29465},{49601,21505},{82723,53531},{93014,81780},{39164,87715},{57726,88636},{42571,5049},{87883,15172},{44444,5476},{56568,99005},{50827,48646},{79647,77545},{62014,96869},{85943,48598},{7437,33090},{54387,52761},{30400,93317},{50562,80501},{54001,6364},{60607,26985},{44477,4161},{49065,4938},{86033,35725},{6629,18227},{94875,56798},{42325,13521},{43196,8256},{93543,26232},{79429,70199},{27380,36621},{54391,3932},{91033,70408},{76491,38215},{36219,28090},{86088,20174},{16420,81311},{23640,7818},{11987,45139},{70244,28220},{54541,84627},{94089,41131},{93593,59617},{2064,87932},{16759,92206},{23809,39505},{90920,36154},{27183,79250},{4129,53876},{78263,85272},{1410,9621},{42269,4905},{5565,50326},{27037,89472},{22092,24359},{72216,47109},{65345,98355},{30471,65836},{21607,54442},{17062,47607},{42463,19235},{7516,40001},{7320,54328},{34317,92301},{97726,7343},{27957,31362},{19876,50411},{6779,65928},{69439,35424},{26045,7604},{49976,94117},{35097,922},{37801,31307},{19902,16091},{31660,81017},{69369,14476}})));
    }

    static class Solution {
        public int[] getOrder(int[][] tasks) {
            int[] result = new int[tasks.length];

            // need a min heap that will sort my tasks by small processing asc, smallest index asc
            PriorityQueue<Task> minHeap = new PriorityQueue<>(tasks.length);

            // put all tasks into hashtable
            PriorityQueue<Task> taskList = new PriorityQueue<>(tasks.length, Comparator.comparingInt(o -> o.enqueueTime));

            for (int i = 0; i < tasks.length; i++) {
                taskList.add(new Task(i, tasks[i]));
            }
            int currentTaskEndTime = -1;
            Task currentTask = null;
            int numCompletedTasks = 0;
            int time = taskList.isEmpty() ? 0 : taskList.peek().enqueueTime;

            // need a looping mechanism that will ask as my clock
            do {

                // check task map for tasks where enqueueTime = time
                while (!taskList.isEmpty() && taskList.peek().enqueueTime == time) {
                    minHeap.add(taskList.remove());
                }

                // check if the current task should end
                if (currentTaskEndTime == time) {
                    currentTask = null;
                    currentTaskEndTime = -1;
                }

                // get the next task
                if (!minHeap.isEmpty() && currentTask == null) {
                    currentTask = minHeap.remove();
                    currentTaskEndTime = time + currentTask.processingTime;
                    result[numCompletedTasks++] = currentTask.index;
                }

                if (minHeap.isEmpty() && !taskList.isEmpty()) {
                    time = taskList.peek().enqueueTime;
                    System.out.println("Skipping to " + time);
                } else {
                    time++;
                }
            } while (!minHeap.isEmpty() || !taskList.isEmpty());
            return result;
        }


        static class Task implements Comparable<Task> {

            final int processingTime;
            final int enqueueTime;
            final int index;

            public Task(int index, int[] task) {
                this.index = index;
                this.enqueueTime = task[0];
                this.processingTime = task[1];
            }


            @Override
            public int compareTo(Task that) {
                int procTime = this.processingTime - that.processingTime;

                if (procTime == 0) {
                    return this.index - that.index;
                } else {
                    return procTime;
                }
            }
        }
    }
}
